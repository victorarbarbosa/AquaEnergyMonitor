@page "/home"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using AquaEnergyMonitor.Services

@inject ConsumoService ConsumoService
@inject NavigationManager NavManager

<header class="site-header">
    <h2 class="header-title" style="display:inline;">AquaEnergyMonitor</h2>
    <nav>
        <RadzenButton Click=@(args => CadastrarConsumoAgua()) Icon="add_circle" Text="Consumo Agua" ButtonStyle="ButtonStyle.Info" />
        <RadzenButton Click=@(args => CadastrarConsumoEnergia()) Icon="add_circle" Text="Consumo Energia" ButtonStyle="ButtonStyle.Warning" />
        <RadzenButton Click=@(args => NavManager.NavigateTo("/consumos")) Text="Visualizar Consumo" ButtonStyle="ButtonStyle.Base" />
        <RadzenButton Click=@(args => CadastrarConsumoAgua()) Text="Perfil" ButtonStyle="ButtonStyle.Base" />
        <RadzenButton Click=@(args => CadastrarConsumoAgua()) Text="Sair" ButtonStyle="ButtonStyle.Danger" />
    </nav>
</header>

<div class="aqua-container">
    <h3 style="text-align:center;">Consumo de Água por Mês</h3>

    <RadzenChart Style="width: 1000px; height: 300px; margin: 0 auto;">
        <RadzenCategoryAxis LabelRotation="-45">
            <RadzenAxisTitle Text="Mês" />
        </RadzenCategoryAxis>
        <RadzenValueAxis Min="0" Max="@GetMaxAxisAgua()" Step="20">
            <RadzenAxisTitle Text="Consumo (m³)" />
        </RadzenValueAxis>

        <RadzenColumnSeries Data="@ConsumoService.GetConsumoAguaPresentation()"
        CategoryProperty="Mes"
        ValueProperty="ConsumoTotal"
        Title="Consumo de Água"
        Fill="#1e88e5">
            <RadzenSeriesDataLabels Visible="true" />
            <RadzenSeriesMeanLine Visible="true" Stroke="var(--rz-danger-dark)" LineType="LineType.Dashed" />
        </RadzenColumnSeries>
    </RadzenChart>
</div>

<div class="energia-container">
    <h3 style="text-align:center;">Consumo de Energia por Mês</h3>

    <RadzenChart Style="width: 1000px; height: 300px; margin: 0 auto;">
        <RadzenCategoryAxis LabelRotation="-45">
            <RadzenAxisTitle Text="Mês" />
        </RadzenCategoryAxis>
        <RadzenValueAxis Min="0" Max="@GetMaxAxisEnergia()" Step="20">
            <RadzenAxisTitle Text="Consumo (kWh)" />
        </RadzenValueAxis>

        <RadzenColumnSeries Data="@ConsumoService.GetConsumoEnergiaPresentation()"
        CategoryProperty="Mes"
        ValueProperty="ConsumoTotal"
        Title="Consumo de Energia"
        Fill="#fbc02d">
            <RadzenSeriesDataLabels Visible="true" />
            <RadzenSeriesMeanLine Visible="true" Stroke="var(--rz-danger-dark)" LineType="LineType.Dashed" />
        </RadzenColumnSeries>
    </RadzenChart>
</div>

@if (mostrarModalCadastroAgua)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Cadastro de Consumo de Energia</h3>

            <EditForm Model="@novoConsumoEnergia" OnValidSubmit="SalvarConsumoEnergia">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label>Data do Consumo:</label>
                    <InputDate @bind-Value="novoConsumoEnergia.Data" class="form-control" />
                </div>

                <div>
                    <label>Consumo de Energia (Kw/H):</label>
                    <InputNumber @bind-Value="novoConsumoEnergia.Kwh" class="form-control" />
                </div>

                <div style="margin-top: 10px;">
                    <button type="submit" class="btn btn-primary">Salvar</button>
                    <button type="button" class="btn btn-secondary" @onclick="FecharModal">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (alertaSucessoCadastro)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Consumo cadastrado com sucesso!</h3>

            <div style="margin-top: 10px;">
                <button type="button" class="btn btn-secondary" @onclick="FecharAlerta">Entendi</button>
            </div>
        </div>
    </div>
}

@if (alertaErroCadastro)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Houve um erro no cadastro</h3>

            <div style="margin-top: 10px;">
                <button type="button" class="btn btn-secondary" @onclick="FecharAlerta">Entendi</button>
            </div>
        </div>
    </div>
}

@code {
    public class ConsumoEnergiaDto
    {
        public Guid Id { get; set; }
        [Required]
        public DateTime Data { get; set; }
        [Required]
        public double Kwh { get; set; }
        public string FormatedDate
        {
            get
            {
                return Data.ToString("dd/MM/yyyy");
            }
        }
    }

    public class ConsumoAguaDto
    {
        public Guid Id { get; set; }
        [Required]
        public DateTime Data { get; set; }
        [Required]
        public double MetrosCubicos { get; set; }
        public string FormatedDate
        {
            get
            {
                return Data.ToString("dd/MM/yyyy");
            }
        }
    }

    private bool mostrarModalCadastroAgua = false;
    private bool mostrarModalCadastroEnergia = false;
    private bool alertaSucessoCadastro = false;
    private bool alertaErroCadastro = false;

    private ConsumoAguaDto novoConsumoAgua = new();
    private ConsumoEnergiaDto novoConsumoEnergia = new();

    private void CadastrarConsumoAgua()
    {
        novoConsumoAgua = new();
        mostrarModalCadastroAgua = true;
    }

    private void CadastrarConsumoEnergia()
    {
        novoConsumoEnergia = new();
        mostrarModalCadastroEnergia = true;
    }

    private void FecharModal()
    {
        mostrarModalCadastroAgua = false;
        mostrarModalCadastroEnergia = false;
    }

    private void FecharAlerta()
    {
        alertaSucessoCadastro = false;
        alertaErroCadastro = false;
    }

    private async Task SalvarConsumoAgua()
    {
        var sucess = await ConsumoService.CadastraConsumoAgua(novoConsumoAgua);

        FecharModal();

        if (sucess)
        {
            alertaSucessoCadastro = true;
        } else
        {
            alertaErroCadastro = true;
        }
    }

    private async Task SalvarConsumoEnergia()
    {
        var sucess = await ConsumoService.CadastraConsumoEnergia(novoConsumoEnergia);

        FecharModal();

        if (sucess)
        {
            alertaSucessoCadastro = true;
        }
        else
        {
            alertaErroCadastro = true;
        }
    }

    private double GetMaxAxisAgua()
    {
        return ConsumoService.GetConsumoAguaPresentation().Max(c => c.ConsumoTotal) + 20;
    }

    private double GetMaxAxisEnergia()
    {
        return ConsumoService.GetConsumoEnergiaPresentation().Max(c => c.ConsumoTotal) + 20;
    }
}
