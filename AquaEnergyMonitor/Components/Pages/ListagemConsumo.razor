@page "/consumos"
@rendermode InteractiveServer

@using AquaEnergyMonitor.Services
@using static AquaEnergyMonitor.Components.Pages.Home

@inject ConsumoService ConsumoService
@inject SessionService SessionService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<header class="site-header">
    <h2 class="header-title" style="display:inline;">AquaEnergyMonitor</h2>
    <nav>
        <RadzenButton Click=@(args => CadastrarConsumoAgua()) Icon="add_circle" Text="Consumo Agua" ButtonStyle="ButtonStyle.Info" />
        <RadzenButton Click=@(args => CadastrarConsumoEnergia()) Icon="add_circle" Text="Consumo Energia" ButtonStyle="ButtonStyle.Warning" />
        <RadzenButton Click="@(args => Navigation.NavigateTo("/home"))" Text="Início" ButtonStyle="ButtonStyle.Base" />
        <RadzenButton Click=@(args => Navigation.NavigateTo("/perfil")) Text="Perfil" ButtonStyle="ButtonStyle.Base" />
        <RadzenButton Click=@(args => RealizaSaida()) Text="Sair" ButtonStyle="ButtonStyle.Danger" />
    </nav>
</header>

<div class="container-grid" style="display:flex; flex-wrap:wrap; gap:20px; justify-content:center; padding:20px;">
    <!-- Consumo de Água -->
    <RadzenCard Style="width:45%; min-width:300px;">
        <h3 style="text-align:center;">Consumo de Água</h3>
        <p style="margin-bottom: 15px;">
            A média de 4,5 m³ por pessoa/mês, recomendada por órgãos como a ANA para um uso racional e sem
            desperdício é utilizada no calculo de alerta de consumo.</p>
        <RadzenDataGrid @ref="aguaGrid" Data="@consumosAgua" TItem="ConsumoAguaDto" ShowPagingSummary="true" PageSize="8" AllowPaging="true" EditMode="@editMode">
            <Columns>
                <RadzenDataGridColumn TItem="ConsumoAguaDto" Property="FormatedDate" Title="Data" />
                <RadzenDataGridColumn TItem="ConsumoAguaDto" Property="MetrosCubicos" Title="Consumo (m³)" />
                <RadzenDataGridColumn TItem="ConsumoAguaDto" Title="Ações">
                    <Template Context="item">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="@(() => EditarConsumoAgua(item))" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Style="margin-left:5px;" Click="@(() => ExcluiConsumoAgua(item.Id))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        @if (ConsumosAguaElevados.Count > 0)
        {
            <h4 style="margin-top:20px; color: darkred;">Consumos Elevados nos ultimos 12 meses:</h4>
            <ul style="color: darkred;">
                @foreach (var item in ConsumosAguaElevados)
                {
                    <li>@item.MesFormatado - @item.ConsumoTotal.ToString() m³</li>
                }
            </ul>
        }
    </RadzenCard>

    <!-- Consumo de Energia -->
    <RadzenCard Style="width:45%; min-width:300px;">
        <h3 style="text-align:center;">Consumo de Energia</h3>
        <p style="margin-bottom: 15px;">A média de 70 kWh por pessoa/mês, baseada em dados da EPE e ANEEL para um consumo eficiente em residências é 
            utilizado no calculo de alerta de consumo.</p>
        <RadzenDataGrid @ref="energiaGrid" Data="@consumosEnergia" TItem="ConsumoEnergiaDto" ShowPagingSummary="true" PageSize="8" AllowPaging="true" EditMode="@editMode">
            <Columns>
                <RadzenDataGridColumn TItem="ConsumoEnergiaDto" Property="FormatedDate" Title="Data" />
                <RadzenDataGridColumn TItem="ConsumoEnergiaDto" Property="Kwh" Title="Consumo (kWh)" />
                <RadzenDataGridColumn TItem="ConsumoEnergiaDto" Title="Ações">
                    <Template Context="item">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="@(() => EditarConsumoEnergia(item))" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Style="margin-left:5px;" Click="@(() => ExcluiConsumoEnergia(item.Id))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        @if (ConsumosEnergiaElevados.Count > 0)
        {
            <h4 style="margin-top:20px; color: darkred;">Consumos Elevados nos ultimos 12 meses:</h4>
            <ul style="color: darkred;">
                @foreach (var item in ConsumosEnergiaElevados)
                {
                    <li>@item.MesFormatado - @item.ConsumoTotal.ToString() kWh</li>
                }
            </ul>
        }
    </RadzenCard>
</div>

<!-- Modal de Edição - Água -->
<div class="modal-overlay" style="@(exibirModalAgua ? "display:block;" : "display:none;") position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); z-index:1000;">
    <div class="modal-content" style="background:white; padding:20px; max-width:500px; margin:100px auto; border-radius:10px;">
        <h3>Editar Consumo de Água</h3>
        <EditForm Model="@consumoAguaEditando" OnValidSubmit="@SalvarEdicaoConsumoAgua">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label>Data</label>
                <InputDate @bind-Value="consumoAguaEditando.Data" class="form-control" />
            </div>
            <div>
                <label>Consumo (m³)</label>
                <InputNumber @bind-Value="consumoAguaEditando.MetrosCubicos" class="form-control" />
            </div>
            <div style="margin-top: 20px;">
                <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary" Style="margin-left:10px;" Click="@FecharModalAgua" />
            </div>
        </EditForm>
    </div>
</div>

<!-- Modal de Edição - Energia -->
<div class="modal-overlay" style="@(exibirModalEnergia ? "display:block;" : "display:none;") position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); z-index:1000;">
    <div class="modal-content" style="background:white; padding:20px; max-width:500px; margin:100px auto; border-radius:10px;">
        <h3>Editar Consumo de Energia</h3>
        <EditForm Model="@consumoEnergiaEditando" OnValidSubmit="@SalvarEdicaoConsumoEnergia">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label>Data</label>
                <InputDate @bind-Value="consumoEnergiaEditando.Data" class="form-control" />
            </div>
            <div>
                <label>Consumo (kWh)</label>
                <InputNumber @bind-Value="consumoEnergiaEditando.Kwh" class="form-control" />
            </div>
            <div style="margin-top: 20px;">
                <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary" Style="margin-left:10px;" Click="@FecharModalEnergia" />
            </div>
        </EditForm>
    </div>
</div>

@if (mostrarModalCadastroAgua)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Cadastro de Consumo de Água</h3>
            <p>Média de 4,5 m³ por pessoa/mês, recomendada por órgãos como a ANA para um uso racional e sem desperdício.</p>
            <EditForm Model="@novoConsumoAgua" OnValidSubmit="SalvarConsumoAgua">
                <DataAnnotationsValidator />

                <div>
                    <label>Data do Consumo:</label>
                    <InputDate @bind-Value="novoConsumoAgua.Data" class="form-control" />
                </div>

                <div>
                    <label>Consumo de Água (m³):</label>
                    <InputNumber @bind-Value="novoConsumoAgua.MetrosCubicos" class="form-control" />
                    <ValidationMessage For="@(() => novoConsumoAgua.MetrosCubicos)" />
                </div>

                <div style="margin-top: 10px;">
                    <button type="submit" class="btn btn-primary">Salvar</button>
                    <button type="button" class="btn btn-secondary" @onclick="FecharModal">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (mostrarModalCadastroEnergia)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Cadastro de Consumo de Energia</h3>
            <p>Média de 70 kWh por pessoa/mês, baseada em dados da EPE e ANEEL para um consumo eficiente em residências.</p>
            <EditForm Model="@novoConsumoEnergia" OnValidSubmit="SalvarConsumoEnergia">
                <DataAnnotationsValidator />

                <div>
                    <label>Data do Consumo:</label>
                    <InputDate @bind-Value="novoConsumoEnergia.Data" class="form-control" />
                </div>

                <div>
                    <label>Consumo de Energia (Kw/H):</label>
                    <InputNumber @bind-Value="novoConsumoEnergia.Kwh" class="form-control" />
                    <ValidationMessage For="@(() => novoConsumoEnergia.Kwh)" />
                </div>

                <div style="margin-top: 10px;">
                    <button type="submit" class="btn btn-primary">Salvar</button>
                    <button type="button" class="btn btn-secondary" @onclick="FecharModal">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (alertaSucessoCadastro)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Consumo cadastrado com sucesso!</h3>

            <div style="margin-top: 10px;">
                <button type="button" class="btn btn-secondary" @onclick="FecharAlerta">Entendi</button>
            </div>
        </div>
    </div>
}

@if (alertaErroCadastro)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Houve um erro no cadastro</h3>

            <div style="margin-top: 10px;">
                <button type="button" class="btn btn-secondary" @onclick="FecharAlerta">Entendi</button>
            </div>
        </div>
    </div>
}

@code {
    RadzenDataGrid<ConsumoAguaDto> aguaGrid;
    RadzenDataGrid<ConsumoEnergiaDto> energiaGrid;
    DataGridEditMode editMode = DataGridEditMode.Single;

    private List<ConsumoAguaDto> consumosAgua = new();
    private List<ConsumoEnergiaDto> consumosEnergia = new();

    private double _consumoAguaAdequado;
    private double _consumoEnergiaAdequado;

    private List<ConsumoAguaPresentation> ConsumosAguaElevados = new();
    private List<ConsumoEnergiaPresentation> ConsumosEnergiaElevados = new();

    private bool exibirModalAgua = false;
    private ConsumoAguaDto consumoAguaEditando = new();
    private EditContext editContextAgua;

    private bool exibirModalEnergia = false;
    private ConsumoEnergiaDto consumoEnergiaEditando = new();
    private EditContext editContextEnergia;

    protected override async Task OnInitializedAsync()
    {
        consumosAgua = ConsumoService.GetConsumoAgua();
        consumosEnergia = ConsumoService.GetConsumoEnergia();

        _consumoAguaAdequado = await ConsumoService.CalculaConsumoAguaAdequadoAsync();
        _consumoEnergiaAdequado = await ConsumoService.CalculaConsumoEnergiaAdequadoAsync();

        AtualizaConsumosElevados();

        StateHasChanged();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", "window.scrollTo(0, 0)");
        }
    }

    public async Task ExcluiConsumoAgua(Guid id)
    {
        ConsumoService.ExcluiConsumoAgua(id);
        consumosAgua = ConsumoService.GetConsumoAgua();
        AtualizaConsumosElevados();
        await aguaGrid.Reload();
    }

    public async Task ExcluiConsumoEnergia(Guid id)
    {
        ConsumoService.ExcluiConsumoEnergia(id);
        consumosEnergia = ConsumoService.GetConsumoEnergia();
        AtualizaConsumosElevados();
        await energiaGrid.Reload();
    }

    private void EditarConsumoAgua(ConsumoAguaDto item)
    {
        consumoAguaEditando = new ConsumoAguaDto
            {
                Id = item.Id,
                Data = item.Data,
                MetrosCubicos = item.MetrosCubicos
            };
        editContextAgua = new EditContext(consumoAguaEditando);
        exibirModalAgua = true;
    }

    private async Task SalvarEdicaoConsumoAgua()
    {
        var original = consumosAgua.FirstOrDefault(x => x.Id == consumoAguaEditando.Id);
        if (original != null)
        {
            original.Data = consumoAguaEditando.Data;
            original.MetrosCubicos = consumoAguaEditando.MetrosCubicos;
            ConsumoService.AtualizaConsumoAgua(original);
        }

        exibirModalAgua = false;
        await aguaGrid.Reload();
        AtualizaConsumosElevados();
    }

    private void FecharModalAgua()
    {
        exibirModalAgua = false;
    }

    private void EditarConsumoEnergia(ConsumoEnergiaDto item)
    {
        consumoEnergiaEditando = new ConsumoEnergiaDto
            {
                Id = item.Id,
                Data = item.Data,
                Kwh = item.Kwh
            };
        editContextEnergia = new EditContext(consumoEnergiaEditando);
        exibirModalEnergia = true;
    }

    private async Task SalvarEdicaoConsumoEnergia()
    {
        var original = consumosEnergia.FirstOrDefault(x => x.Id == consumoEnergiaEditando.Id);
        if (original != null)
        {
            original.Data = consumoEnergiaEditando.Data;
            original.Kwh = consumoEnergiaEditando.Kwh;
            ConsumoService.AtualizaConsumoEnergia(original);
        }

        exibirModalEnergia = false;
        await energiaGrid.Reload();
        AtualizaConsumosElevados();
    }

    private void FecharModalEnergia()
    {
        exibirModalEnergia = false;
    }

    private bool mostrarModalCadastroAgua = false;
    private bool mostrarModalCadastroEnergia = false;
    private bool alertaSucessoCadastro = false;
    private bool alertaErroCadastro = false;

    private ConsumoAguaDto novoConsumoAgua = new();
    private ConsumoEnergiaDto novoConsumoEnergia = new();

    private void CadastrarConsumoAgua()
    {
        novoConsumoAgua = new();
        mostrarModalCadastroAgua = true;
    }

    private void CadastrarConsumoEnergia()
    {
        novoConsumoEnergia = new();
        mostrarModalCadastroEnergia = true;
    }

    private void FecharModal()
    {
        mostrarModalCadastroAgua = false;
        mostrarModalCadastroEnergia = false;
    }

    private void FecharAlerta()
    {
        alertaSucessoCadastro = false;
        alertaErroCadastro = false;
    }

    private async Task SalvarConsumoAgua()
    {
        var sucess = await ConsumoService.CadastraConsumoAgua(novoConsumoAgua);

        FecharModal();

        consumosAgua = ConsumoService.GetConsumoAgua();

        AtualizaConsumosElevados();

        if (sucess)
        {
            alertaSucessoCadastro = true;
        }
        else
        {
            alertaErroCadastro = true;
        }
    }

    private async Task SalvarConsumoEnergia()
    {
        var sucess = await ConsumoService.CadastraConsumoEnergia(novoConsumoEnergia);

        FecharModal();

        consumosEnergia = ConsumoService.GetConsumoEnergia();

        AtualizaConsumosElevados();

        if (sucess)
        {
            alertaSucessoCadastro = true;
        }
        else
        {
            alertaErroCadastro = true;
        }
    }

    private void AtualizaConsumosElevados()
    {
        ConsumosAguaElevados = ConsumoService.GetConsumoAguaPresentation()
            .Where(c => c.ConsumoTotal > _consumoAguaAdequado && c.Mes > c.Mes.AddYears(-1))
            .ToList();
        
        ConsumosEnergiaElevados = ConsumoService.GetConsumoEnergiaPresentation()
            .Where(c => c.ConsumoTotal > _consumoEnergiaAdequado && c.Mes > c.Mes.AddYears(-1))
            .ToList();
    }

    private void RealizaSaida()
    {
        SessionService.ClearUserId();
        Navigation.NavigateTo("/");
    }
}
